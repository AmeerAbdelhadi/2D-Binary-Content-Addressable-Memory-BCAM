#!/bin/csh -f

####################################################################################
## Copyright (c) 2014, University of British Columbia (UBC)  All rights reserved. ##
##                                                                                ##
## Redistribution  and  use  in  source   and  binary  forms,   with  or  without ##
## modification,  are permitted  provided that  the following conditions are met: ##
##   * Redistributions   of  source   code  must  retain   the   above  copyright ##
##     notice,  this   list   of   conditions   and   the  following  disclaimer. ##
##   * Redistributions  in  binary  form  must  reproduce  the  above   copyright ##
##     notice, this  list  of  conditions  and the  following  disclaimer in  the ##
##     documentation and/or  other  materials  provided  with  the  distribution. ##
##   * Neither the name of the University of British Columbia (UBC) nor the names ##
##     of   its   contributors  may  be  used  to  endorse  or   promote products ##
##     derived from  this  software without  specific  prior  written permission. ##
##                                                                                ##
## THIS  SOFTWARE IS  PROVIDED  BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" ##
## AND  ANY EXPRESS  OR IMPLIED WARRANTIES,  INCLUDING,  BUT NOT LIMITED TO,  THE ##
## IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE ##
## DISCLAIMED.  IN NO  EVENT SHALL University of British Columbia (UBC) BE LIABLE ##
## FOR ANY DIRECT,  INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL ##
## DAMAGES  (INCLUDING,  BUT NOT LIMITED TO,  PROCUREMENT OF  SUBSTITUTE GOODS OR ##
## SERVICES;  LOSS OF USE,  DATA,  OR PROFITS;  OR BUSINESS INTERRUPTION) HOWEVER ##
## CAUSED AND ON ANY THEORY OF LIABILITY,  WHETHER IN CONTRACT, STRICT LIABILITY, ##
## OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ##
## OF  THIS SOFTWARE,  EVEN  IF  ADVISED  OF  THE  POSSIBILITY  OF  SUCH  DAMAGE. ##
####################################################################################

####################################################################################
##                   sim: Run-in-batch simulation flow manager                    ##
##                                                                                ##
##   Author: Ameer M.S. Abdelhadi (ameer@ece.ubc.ca, ameer.abdelhadi@gmail.com)   ##
##    SRAM-based 2D BCAM; The University of British Columbia (UBC), April 2014    ##
####################################################################################

####################################################################################
## USAGE:                                                                         ##
##   ./sim <CAM Depth List> <Pattern Width List> <Segment Width List> <#Cycles>   ##
##                                                                                ##
## - Use a comma delimited list; no space; can be surrounded by brackets ()[]{}<> ##
## - CAM depth, pattern width, segment width and cycles are positive integers     ##
##                                                                                ##
## EXAMPLES:                                                                      ##
## ./sim 8192 9 8 1000000                                                         ##
##    Simulate 1M cycles of a 8K lines CAM, 9 bits pattern width, 8 bits segments ##
## ./sim 2048,4096 8,9,10 8,16 1000000                                            ##
##    Simulate 1M cycles of CAMs with 2k or 4k lines, 8, 9, or 10 bits pattern,   ##
##    8 or 16 bits segment. Total of 12 CAM combinations                          ##
##                                                                                ##
## The following files and directories will be created after simulation :         ##
##   - sim.res : A list of simulation results, each run in a separate line,       ##
##               including all design styles.                                     ##
####################################################################################

# setup Altera's Modelsim for simulation; change to your own flow if necessary 
source /CMC/scripts/altera.13.1.csh
source /CMC/tools/licenses/altera.csh
setenv PATH ${QUARTUS_HOME}/../nios2eds/bin/:${QUARTUS_HOME}/../modelsim_ase/bin:${PATH}

# require exactly 4 arguments
if (${#argv} != 4) then
    printf '\x1b[%i;3%im' 1 1
    printf 'Error: Exactly 4 are required\n'
    printf '\x1b[0m'
    goto errorMessage
endif

# convert each argument list into a c-shell list (remove commas and etc.)
set CAMDLST = (`echo ${argv[1]} | tr ",()[]{}<>" " "`)
set PATWLST = (`echo ${argv[2]} | tr ",()[]{}<>" " "`)
set SEGWLST = (`echo ${argv[3]} | tr ",()[]{}<>" " "`)
set SCYCNUM = ${argv[4]}

# check arguments correctness (positive integer numbers)
foreach ARGVAL ($CAMDLST $PATWLST $SEGWLST $SCYCNUM)
  set ARGVALIsNumber=`echo $ARGVAL | egrep -c '^[0-9]+$'`
  if ($ARGVALIsNumber != 1) then
    printf '\x1b[%i;3%im' 1 1
    printf "Error (${ARGVAL}): CAM depth, pattern width, segment width and number of cycles arguments should be possitive integer numbers\n"
    printf '\x1b[0m'
    goto errorMessage
  endif
end

# total different fifo designs
@ FlowOprNum = ((${#CAMDLST})*(${#PATWLST})*(${#SEGWLST}))
@ FlowOprCnt = 0

printf '\x1b[%i;3%im' 7 4
printf "= Simulate in batch with the following parameters:\n"
printf "= CAM Depth          : $CAMDLST\n"
printf "= Pattern width      : $PATWLST\n"
printf "= Segment width (STR): $SEGWLST\n"
printf "= Simulation Cycles  : $SCYCNUM\n"
printf '\x1b[0m'

# operate on all different RAM parameters
  foreach CURCAMD ($CAMDLST)
    foreach CURPATW ($PATWLST)
      foreach CURSEGW ($SEGWLST)
        @ FlowOprCnt++

        printf '\x1b[%i;3%im' 7 2
        printf "\n== Starting Simulation (${FlowOprCnt}/${FlowOprNum}): [CAM depth:${CURCAMD}; Pattern width:${CURPATW}; Segment width:${CURSEGW}; Simulation cycles:${SCYCNUM}]\n"
        printf '\x1b[0m'

        # remove work directory to recompile verilog
        if (-d work) \rm -rf work
        # recreate work directory
        vlib work

        # Generate priority encoders
        \rm pe*.v
        ./pe $CURCAMD                   0 0 999 CASE camd
        ./pe `expr $CURCAMD / $CURSEGW` 0 0 999 CASE nseg
        ./pe $CURSEGW                   0 0 999 CASE segw

        # Generate reduction OR
        \rm reduction_or.v
        ./reduction $CURSEGW 6 0 0 999 OR or

        # Generate mux
        \rm mux_data2rmv.v
        ./mux $CURSEGW $CURPATW 4 0 0 999 data2rmv

        # run current simulation
        vlog -work work +define+CAMD=$CURCAMD+CAMW=$CURPATW+SEGW=$CURSEGW+CYCC=$SCYCNUM utils.vh pe*.v mux_*.v reduction_*.v spram.v mwram_gen.v mwram_m20k.v tdpram.v dpram_be.v trcam.v bcam_bhv.v bcam_reg.v bcam_trs.v bcam_trc.v bcam_str.v bcam_tb.v bcam.v 
        vsim -c -L altera_mf_ver -L lpm_ver -L altera_ver -L stratixv_ver -do "run -all" bcam_tb

        printf '\x1b[%i;3%im' 7 2
        printf "== Simulation (${FlowOprCnt}/${FlowOprNum}) Completed: [CAM depth:${CURCAMD}; Pattern width:${CURPATW}; Segment width:${CURSEGW}; Simulation cycles:${SCYCNUM}]\n"
        printf '\x1b[0m'

    end
  end
end

# clean unrequired files / after run
 foreach fileName (*.mif *.hex *.ver *.wlf *.vstf *.log transcript work)
   \rm -rf $fileName
 end


goto scriptEnd

# error message
errorMessage:
printf '\x1b[%i;3%im' 1 1
cat << EOH
USAGE:
  ./sim <CAM Depth List> <Pattern Width List> <Segment Width List> <#Cycles>
  - Use a comma delimited list; no space; can be surrounded by brackets ()[]{}<>
  - CAM depth, pattern width, segment width and cycles are positive integers
EXAMPLES:
  ./sim 8192 9 8 1000000
    Simulate 1M cycles of a 8K lines CAM, 9 bits pattern width, 8 bits segments
  ./sim 2048,4096 8,9,10 8,16 1000000
    Simulate 1M cycles of CAMs with 2k or 4k lines, 8, 9, or 10 bits pattern,
    8 or 16 bits segment. Total of 12 CAM combinations
The following files and directories will be created after simulation:
  - sim.res : A list of simulation results, each run in a separate line,
              including all design styles.
EOH
printf '\x1b[0m'
scriptEnd:

